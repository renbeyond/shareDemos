介绍：
    在开发中，使用率很高，尤其现在的各种第三方SDK，他们很大概率使用外观模式，。
    通过一个外观类使得整个系统的接口只有一个统一的高层接口，能降低用户的使用成本，也对用户屏蔽了很多实现细节
    例如：网络加载模块、ImageLoader模块等。

实用场景：
    1、当你要为一个复杂子系统提供一个简单接口时。子系统往往因为不断演化而变得越来越复杂。大多数模式使用时都会产生更多更小的类。这使得子系
   统更具可重用性，也更容易对子系统进行定制，但这也给那些不需要定制子系统的用户带来一些使用上的困难。
   Facade可以提供一个简单的缺省视图，这一视图对大多数用户来说已经足够，而那些需要更多的可定制性的用户可以越过Facade层。
    2、客户程序与抽象类的实现部分之间存在着很大的依赖性。引入Facade将这个子系统与客户以及其他的子系统分离，可以提高子系统的独立性和可移
   植性。
    3、当你需要构建一个层次结构的子系统时，使用Facade模式定义子系统中每层的入口点，如果子系统之间是相互依赖的，你可以让它们仅通过Facade
   进行通讯，从而简化了它们之间的依赖关系。

优点：
    1.对客户隐藏代码细节，减少客户对于子系统的耦合。
    2. 外观类对于子系统的接口封装，更容易使用。
缺点：
    1. 外观类接口膨胀，由于子系统的接口都有外观类统一对外暴露，接口变多。
    2. 外观类没有遵循开闭原则，当业务发生改变，需要直接修改外观类。